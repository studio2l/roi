{{define "shots"}}
{{template "head" }}
{{template "nav" $}}
{{template "search-menu" $}}
<style> [``
.tasks {
	flex: 1;
	height: max-content;
	color: #AAA;
	background-color: #333;
	border-radius: 4px;
	font-size: 0.9rem;
}
.task {
	display: grid;
	grid-template-columns: 1fr 1fr 4fr 1fr;
	padding: 0.4rem 1.1rem;
	border-top: solid 1px rgba(255,255,255,0.1);
}
.task div {
	align-self: flex-end;
}
.task:nth-child(even) {
	background-color: rgba(255,255,255,0.05);
}
.task:nth-child(1) {
	border-top: 0;
}
.version-divider {
	margin: 0 1rem 0 1rem;
	color: rgba(255,255,255,0.2);
}
.version {
	width: 6rem;
	display: flex;
	justify-content: center;
}
.selected-shot {
	box-shadow: 0 0 0 1px yellow !important;
}
``]
<div style="padding:15px 10px 15px 10px;z-index:0;"> [
<!--검색 결과-->
{{range $s := .Shots}}
<div id="{{$s.ID}}" class="ui inverted segment shot"> [
	<div class="shot-head" style="height:20px;display:flex;align-items:end;margin-bottom:4px;font-size:15px;"> [
		<div class="ui" style="width:288px;margin-right:22px;display:flex;align-items:end;"> [
				<div style="display:flex;flex-direction:column;"> [
					<a href="/update-shot?id={{$s.ID}}" style="font-size:1.3rem;color:white;border-bottom:solid 1px var(--{{.Status.UIColor}});"> [
						<b> [{{.Shot}}]
					]
				]
				<div style="width:1rem;display:inline-block;"> []
				<div style="flex:1;"> []
		]
		<div style="flex:1;font-size:14px;"> [ {{.CGDescription}}]
	]
	<div class="shot-main" style="display:flex;margin-bottom:6px;"> [
		<div style="width:288px;margin-right:22px;"> [
			{{if hasThumbnail $s.ID}}
			<img style="width:288px;height:162px;" src="{{if hasThumbnail $s.ID}}/data/show/{{$s.ID}}/thumbnail.png{{end}}" onclick="selectShot(this)" />
			{{else}}
			<div style="box-sizing:border-box;width:288px;height:162px;color:#444444;background-color:#BBBBBB;font-size:12px;padding:4px;"  onclick="selectShot(this)"> [{{.Description}}]
			{{end}}
			<div style="display:flex;justify-content:space-between;font-size:11px;color:gray;margin:0px;"> [
				<div> [{{.TimecodeIn}} - {{.TimecodeOut}}]
				<div> [<div style="display:inline-block;"> [{{.Duration}}] f]
			]
		]
		<div class="tasks"> [
			{{range $i, $t := .Tasks}}
			{{with index (index $.Tasks $s.Shot) $t}}
			<div class="task"> [
				<div> [<a href="/update-task?id={{.ID}}" style="font-size:1.05rem;color:white;flex:1;">[{{.Task}}]]
				<div> [<a href="/user/{{.Assignee}}" style="color:inherit">[{{.Assignee}}]]
				<div style="display:flex"> [
					{{$i := 0}}
					{{if .PublishVersion}}
						{{if $i}}<span class="version-divider"> [/]{{end}} {{$i = inc $i}}
						<div class="version"> [<a href="/update-version?id={{.ID}}/{{.PublishVersion}}" style="color:inherit"> [{{.PublishVersion}} 퍼블리시]]
					{{end}}
					{{if .ApprovedVersion}}
						{{if $i}}<span class="version-divider"> [/]{{end}} {{$i = inc $i}}
						<div class="version"> [<a href="/update-version?id={{.ID}}/{{.ApprovedVersion}}" style="color:inherit"> [{{.ApprovedVersion}} 승인됨]]
					{{end}}
					{{if .ReviewVersion}}
						{{if $i}}<span class="version-divider"> [/]{{end}} {{$i = inc $i}}
						<div class="version"> [<a href="/update-version?id={{.ID}}/{{.ReviewVersion}}" style="color:inherit"> [{{.ReviewVersion}} 리뷰대기]]
					{{end}}
					{{if .WorkingVersion}}
						{{if $i}}<span class="version-divider"> [/]{{end}} {{$i = inc $i}}
						<div class="version"> [<a href="/update-version?id={{.ID}}/{{.WorkingVersion}}" style="color:inherit"> [{{.WorkingVersion}} 진행중]]
					{{end}}
				]
				<div style="justify-self:flex-end"> [{{shortStringFromDate .DueDate}}]
			]
			{{end}}
			{{end}}
		]
	]
	<div class="shot-footer" style="display:flex;"> [
		<div style="width:288px;margin-right:22px;padding:1px;display:flex;justify-content:space-between"> [
			<div style="display:flex;"> [
				<div class="shot-status"> [{{.Status.UIString}}]
			]
			<div class="shot-due_date detail"> [{{if not .DueDate.IsZero}}{{stringFromDate .DueDate}}{{end}}]
		]
		<div class="shot-links"> [
			{{if ne (len .Assets) 0 -}}
			<a class="ui mini label" style="background-color:#977;color:white;" href="/assets?show={{$s.Show}}&q={{spaceJoin .Assets}}"> [애셋 ({{fieldJoin .Assets}})]
			{{- end -}}
			{{- range $i, $v := .Tags -}}
			{{if ne $i 0}}{{end}}<a class="ui grey mini label" href="?q=tag%3A{{$v}}">{{$v}}</a>
			{{- end}}
		]
	]
]
{{end}}

<!-- 샷을 선택했을때 아래 바의 크기만큼 공간에 여유를 두어야 함 -->
<div style="height:8rem"> []

]

<div id="bottom-bar" hidden style="position:fixed;bottom:0;width:100%;border-top:solid 1px #333;background-color:#444"> [
	<div id="bottom-bar-menu" style="background-color:#333;display:flex;height:4.5rem;padding:1rem;"> [
		<button style="margin-right:1rem;width:6rem;border-radius:2px" onclick="gotoUpdateMultiShotsPage()"> [샷 수정]
		<button style="margin-right:1rem;width:8rem;border-radius:2px" onclick="gotoUpdateMultiTasksPage()"> [태스크 수정]
		<div style="flex:1;justify-content:end;"> []
	]
	<div style="display:flex;align-items:center;height:3.5rem;padding:0.5rem;border-top:solid 1px #222"> [
		<div id="bottom-bar-notifier" style="color:white;margin-right:1rem"> []
		<a onclick="selectAllShots()" style="cursor:pointer;margin-right:1rem"> [전체선택]
		<a onclick="deselectAllShots()" style="cursor:pointer"> [전체해제]
	]
]
<!--검색 결과 끝-->
<script> [``
// showChanged는 다른 쇼 페이지로 이동한다.
function showChanged() {
	show = document.getElementById("show-select").value;
	document.location.href = "?show=" + show;
};

// selectedshots에 선택된 샷이 담긴다.
let selectedShots = {}

// selectShot은 샷 이미지를 클릭했을때 해당 샷을 선택한다.
function selectShot(img) {
	let shot = img.closest(".shot").id
	if (selectedShots[shot]) {
		delete selectedShots[shot]
	} else {
		selectedShots[shot] = true
	}
	redrawBottomBar()
}

// selectAllShots는 모든 샷을 선택한다.
function selectAllShots() {
	selectedShots = {}
	for (let el of document.getElementsByClassName("shot")) {
		selectedShots[el.id] = true
	}
	redrawBottomBar()
}

// deselectAllShots는 모든 샷의 선택을 해제한다.
function deselectAllShots() {
	selectedShots = {}
	redrawBottomBar()
}

// redrawBottomBar는 하나 이상의 샷이 선택되었을때 이를 알려주고
// 한번에 수정할 수 있게 해주는 하단 바를 그린다.
function redrawBottomBar() {
	for (let el of document.getElementsByClassName("shot")) {
		el.classList.remove("selected-shot")
	}
	for (let shot in selectedShots) {
		let el = document.getElementById(shot)
		el.classList.add("selected-shot")
	}
	let bar = document.getElementById("bottom-bar")
	if (Object.keys(selectedShots).length == 0) {
		bar.hidden = true
	} else {
		bar.hidden = false
	}
	let notifier = document.getElementById("bottom-bar-notifier")
	notifier.innerHTML = String(Object.keys(selectedShots).length) + "개의 샷이 선택되었습니다."
}

// gotoUpdateMultiShotsPage는 선택된 샷들을 한번에 수정할 수 있도록 해주는 페이지로 이동한다.
function gotoUpdateMultiShotsPage() {
	// 나중에 히스토리의 뒤로가기 기능을 이용해 이 페이지로 되돌아올 경우
	// 선택된 샷들의 정보는 변경되었을 가능성이 크므로 다시 불러와야 한다.
	sessionStorage.comeback = "1"
	sessionStorage.selectedShots = JSON.stringify(selectedShots)

	let form = document.createElement("form")
	form.action = "/update-multi-shots"
	// 주의: GET의 최대 데이터 전송 크기 제한때문에 현재 POST로 전송한다.
	form.method = "POST"
	for (let s of Object.keys(selectedShots)) {
		let input = document.createElement("input")
		input.hidden = true
		input.type = "text"
		input.name = "id"
		input.value = s
		form.appendChild(input)
	}
	document.body.appendChild(form)
	form.submit()
}

// gotoUpdateMultiTasksPage는 선택된 샷들의 태스크를 한번에 수정할 수 있도록 해주는 페이지로 이동한다.
function gotoUpdateMultiTasksPage() {
	// 나중에 히스토리의 뒤로가기 기능을 이용해 이 페이지로 되돌아올 경우
	// 선택된 샷들의 정보는 변경되었을 가능성이 크므로 다시 불러와야 한다.
	sessionStorage.comeback = "1"
	sessionStorage.selectedShots = JSON.stringify(selectedShots)

	let form = document.createElement("form")
	form.action = "/update-multi-tasks"
	// 주의: GET의 최대 데이터 전송 크기 제한때문에 현재 POST로 전송한다.
	form.method = "POST"
	for (let s of Object.keys(selectedShots)) {
		let input = document.createElement("input")
		input.hidden = true
		input.type = "text"
		input.name = "id"
		input.value = s
		form.appendChild(input)
	}
	document.body.appendChild(form)
	form.submit()
}

// reloadShots는 이 페이지에서 다른 페이지로 갔다가 히스토리를 이용하여 되돌아 왔을때
// 선택되었던 샷을 되살리고 그 정보를 다시 부른다.
//
// 정보를 되살리는데는 다음 세션 정보를 사용한다.
//
// sessionStorage.comeback - 히스토리 상에서 되돌아 왔음을 의미
// sessionStorage.reload - 데이터를 갱신하되 아래 정보를 되살림
// sessionStorage.selectedShots - 사용자가 선택한 샷들
// sessionStorage.scrollTop - 스크롤 위치
//
function reloadShots() {
	if (sessionStorage.comeback) {
		sessionStorage.removeItem("comeback")
		sessionStorage.reload = "1"
		sessionStorage.scrollTop = document.getElementsByTagName("html")[0].scrollTop
		window.location = window.location // 페이지 리로드
	} else if (sessionStorage.reload) {
		document.getElementsByTagName("html")[0].scrollTop = sessionStorage.scrollTop
		selectedShots = JSON.parse(sessionStorage.selectedShots)
		redrawBottomBar()
		sessionStorage.clear()
	}
}

// 히스토리에서 현재 페이지로 되돌아 올 때 firefox는 window.onfocus 이벤트를 발생시키고
// chrome은 window.onload 이벤트를 발생시킨다.
let isFirefox = navigator.userAgent.indexOf("Firefox")
if (isFirefox) {
	window.onfocus = function(event) {
		reloadShots()
	}
}
let isChrome = navigator.userAgent.indexOf("Chrome")
if (isChrome) {
	window.onload = function(event) {
		reloadShots()
	}
}
``]
{{template "footer"}}
{{end}}
